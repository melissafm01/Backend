import cron from 'node-cron';
import Notification from './models/notification.model.js';
import Task from './models/task.model.js';
import User from './models/user.model.js';
import dayjs from 'dayjs';
import { sendEmail, getReminderTemplate, getConfirmationTemplate } from './libs/sendEmail.js';
import { sendPushNotification } from './libs/sendPushNotification.js';
import Attendance from './models/attendance.model.js';

// CONFIGURACI√ìN DE REINTENTO PARA EMAILS
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 5000; // 5 segundos

// Funci√≥n para reintento de env√≠o
const sendEmailWithRetry = async (emailData, attempt = 1) => {
  try {
    await sendEmail(emailData);
    return true;
  } catch (error) {
    if (attempt < MAX_RETRY_ATTEMPTS) {
      console.log(`‚ö†Ô∏è Intento ${attempt} fallido, reintentando en ${RETRY_DELAY/1000} segundos...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return sendEmailWithRetry(emailData, attempt + 1);
    }
    throw error;
  }
};

export const runNotificationCheck = async (io) => {
  console.log("üîî ===============================================");
  console.log("üîî INICIANDO VERIFICACI√ìN DE NOTIFICACIONES");
  console.log("üîî ===============================================");
  
  const now = dayjs();
  const today = now.startOf('day');
  console.log(`‚è∞ Fecha y hora actual: ${now.format('YYYY-MM-DD HH:mm:ss')}`);

  try {
    // 1. Obtener configuraciones activas que no se hayan enviado hoy
    console.log("üìã Buscando configuraciones de notificaciones...");
    const notifications = await Notification.find({
      isActive: { $ne: false },
      $or: [
        { lastSentDate: null },
        { lastSentDate: { $lt: today.toDate() } }
      ]
    })
      .populate("task")
      .populate("user");

    console.log(`üìä Total de configuraciones encontradas: ${notifications.length}`);

    if (notifications.length === 0) {
      console.log("‚úÖ No hay notificaciones pendientes por enviar");
      return;
    }

    let notificationsSent = 0;
    const batchSize = 10; // Procesar en lotes para evitar sobrecarga

    // 2. Procesar en lotes para mejorar rendimiento
    for (let i = 0; i < notifications.length; i += batchSize) {
      const batch = notifications.slice(i, i + batchSize);
      console.log(`\nüì¶ Procesando lote ${Math.floor(i/batchSize) + 1} (${batch.length} notificaciones)`);

      // Procesar cada notificaci√≥n del lote
      await Promise.all(batch.map(async (config, index) => {
        const globalIndex = i + index;
        console.log(`\n--- PROCESANDO CONFIGURACI√ìN ${globalIndex + 1}/${notifications.length} ---`);
        console.log(`ID de configuraci√≥n: ${config._id}`);

        const { task, user, daysBefore, type = "recordatorio" } = config;

        // 3. Validaciones b√°sicas
        if (!task) {
          console.warn(`‚ùå Configuraci√≥n ${config._id}: No tiene tarea asociada`);
          return;
        }
        if (!user) {
          console.warn(`‚ùå Configuraci√≥n ${config._id}: No tiene usuario asociado`);
          return;
        }
        if (!task.date) {
          console.warn(`‚ùå Configuraci√≥n ${config._id}: La tarea no tiene fecha`);
          return;
        }

        // 4. Verificar si la tarea ya pas√≥
        const taskDate = dayjs(task.date);
        if (taskDate.isBefore(now)) {
          console.log(`‚è∞ La tarea ya pas√≥, desactivando notificaci√≥n...`);
          await Notification.findByIdAndUpdate(config._id, { isActive: false });
          return;
        }

        // 5. Verificar si el usuario a√∫n est√° registrado como asistente
        console.log(`üîç Verificando asistencia del usuario...`);
        const stillAttending = await Attendance.findOne({ 
          task: task._id, 
          $or: [
            { user: user._id },
            { email: user.email?.toLowerCase() }, 
          ]
        });
        
        if (!stillAttending) {
          console.log(`‚ö†Ô∏è Usuario ${user.username} ya no es asistente de "${task.title}"`);
          await Notification.findByIdAndUpdate(config._id, { isActive: false });
          return;
        }
        console.log(`‚úÖ Usuario confirmado como asistente`);

        // 6. Calcular fechas
        const notifyDate = taskDate.subtract(daysBefore, 'day').startOf('day');

        console.log(`üìä C√ÅLCULO DE FECHAS:`);
        console.log(`   - Fecha de la tarea: ${taskDate.format('YYYY-MM-DD')}`);
        console.log(`   - Fecha de notificaci√≥n: ${notifyDate.format('YYYY-MM-DD')}`);
        console.log(`   - Fecha actual: ${today.format('YYYY-MM-DD')}`);
        console.log(`   - ¬øEs hoy el d√≠a de notificar?: ${notifyDate.isSame(today, 'day') ? '‚úÖ S√ç' : '‚ùå NO'}`);

        // 7. Solo enviar si es el d√≠a correcto Y no se ha enviado hoy
        if (notifyDate.isSame(today, 'day')) {
          console.log(`üö® ¬°ES HORA DE NOTIFICAR!`);
          
          // Verificar doble que no se haya enviado hoy
          const lastSent = config.lastSentDate ? dayjs(config.lastSentDate).startOf('day') : null;
          if (lastSent && lastSent.isSame(today, 'day')) {
            console.log(`‚ö†Ô∏è Ya se envi√≥ esta notificaci√≥n hoy, saltando...`);
            return;
          }

          notificationsSent++;

          // MEJORAS EN LOS TEXTOS PARA EVITAR SPAM
          let subject, text, htmlTemplate;
          if (type === "confirmaci√≥n") {
            subject = `Confirma tu participaci√≥n: ${task.title}`;
            text = `Hola ${user.username}, necesitamos confirmar si asistir√°s a "${task.title}" el ${taskDate.format('DD/MM/YYYY')}. Puedes responder este mensaje con "S√ç" o "CONFIRMO" si vas a asistir, o "NO" si no podr√°s participar.`;
            htmlTemplate = getConfirmationTemplate(
              user.username, 
              task.title, 
              taskDate.format('DD/MM/YYYY')
            );
          } else {
            subject = `Recordatorio: ${task.title}`;
            text = `Hola ${user.username}, recuerda que tienes una actividad "${task.title}" el ${taskDate.format('DD/MM/YYYY')}.`;
            htmlTemplate = getReminderTemplate(user.username, task.title, taskDate.format('DD/MM/YYYY'));
          }

          console.log(`üìß ENVIANDO NOTIFICACIONES:`);
          console.log(`   - Asunto: ${subject}`);
          console.log(`   - Tipo: ${type}`);

          try {
            // 8. Marcar como enviado ANTES de enviar
            await Notification.findByIdAndUpdate(config._id, {
              lastSentDate: now.toDate(),
              $inc: { sentCount: 1 }
            });

            // 9. Enviar correo electr√≥nico con reintento
            console.log(`üì¨ Enviando correo electr√≥nico con reintento...`);
            await sendEmailWithRetry({
              to: user.email,
              subject,
              text,
              html: htmlTemplate
            });
            console.log(`‚úÖ Correo enviado exitosamente a ${user.email}`);

            // 10. Enviar notificaci√≥n push (sin bloquear el proceso)
            if (user.fcmToken) {
              console.log(`üì± Enviando notificaci√≥n push...`);
              try {
                await sendPushNotification(user.fcmToken, {
                  title: subject,
                  body: text
                });
                console.log(`‚úÖ Notificaci√≥n push enviada a ${user.username}`);
              } catch (pushErr) {
                console.error(`‚ùå Error al enviar push a ${user.username}:`, pushErr.message);
              }
            }

            // 11. Enviar notificaci√≥n en tiempo real via socket
            if (io) {
              console.log(`üîå Enviando notificaci√≥n en tiempo real...`);
              try {
                const socketNotification = {
                  id: `notif_${Date.now()}_${user._id}`,
                  title: subject,
                  message: text,
                  taskId: task._id,
                  type: type || "recordatorio",
                  timestamp: new Date(),
                  read: false,
                  userId: user._id
                };

                const notificationSent = io.sendNotificationToUser(user._id, socketNotification);
                if (notificationSent) {
                  console.log(`‚úÖ Notificaci√≥n socket enviada exitosamente a ${user.username}`);
                } else {
                  console.log(`‚ùå No se pudo enviar notificaci√≥n socket - Usuario no conectado`);
                }
                
              } catch (socketErr) {
                console.error(`‚ùå Error al enviar notificaci√≥n socket:`, socketErr.message);
              }
            }

          } catch (error) {
            console.error(`‚ùå Error al enviar notificaciones para ${user.username}:`, error.message);
            // Revertir el marcado como enviado si fall√≥
            await Notification.findByIdAndUpdate(config._id, {
              $unset: { lastSentDate: 1 },
              $inc: { sentCount: -1 }
            });
          }
        } else {
          console.log(`‚è≠Ô∏è No es el d√≠a de notificar, continuando...`);
        }
      }));

      // Pausa peque√±a entre lotes para no sobrecargar
      if (i + batchSize < notifications.length) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.log(`\nüîî ===============================================`);
    console.log(`üîî VERIFICACI√ìN COMPLETADA`);
    console.log(`üîî Total de notificaciones enviadas: ${notificationsSent}`);
    console.log(`üîî ===============================================`);

  } catch (error) {
    console.error("‚ùå ERROR CR√çTICO en el cron de notificaciones:");
    console.error("Mensaje:", error.message);
    console.error("Stack:", error.stack);
  }
};

export const startNotificationCron = (io) => {
  console.log("üïê Configurando cron de notificaciones...");
  
  // CAMBIAR A CADA 30 MINUTOS PARA MEJOR RENDIMIENTO
  const cronPattern = "*/30 * * * *"; // Cada 30 minutos
  
  console.log(`‚öôÔ∏è Usando patr√≥n de cron: ${cronPattern}`);
  console.log(`üìù Esto significa: ${getPatternDescription(cronPattern)}`);
  
  cron.schedule(cronPattern, () => {
    console.log(`\n‚è∞ CRON ACTIVADO: ${dayjs().format('YYYY-MM-DD HH:mm:ss')}`);
    runNotificationCheck(io);
  }, {
    scheduled: true,
    timezone: "America/Bogota"
  });
  
  console.log(`‚úÖ Cron configurado correctamente`);
  
  // Ejecutar una vez al inicio despu√©s de un delay m√°s corto
  console.log("üöÄ Ejecutando verificaci√≥n inicial...");
  setTimeout(() => {
    runNotificationCheck(io);
  }, 10000); // 10 segundos en lugar de 5
};

// Funci√≥n helper para describir el patr√≥n cron
function getPatternDescription(pattern) {
  const patterns = {
    "* * * * *": "cada minuto",
    "*/30 * * * *": "cada 30 minutos",
    "0 * * * *": "cada hora",
    "0 7 * * *": "todos los d√≠as a las 7:00 AM",
    "*/5 * * * *": "cada 5 minutos",
    "0 */2 * * *": "cada 2 horas"
  };
  return patterns[pattern] || "patr√≥n personalizado";
}

// Funci√≥n para ejecutar manualmente
export const runNotificationCheckManually = (io) => {
  console.log("üîß ==========================================");
  console.log("üîß EJECUCI√ìN MANUAL DE VERIFICACI√ìN");
  console.log("üîß ==========================================");
  return runNotificationCheck(io);
};

// Funci√≥n para resetear notificaciones (√∫til para pruebas)
export const resetNotifications = async () => {
  console.log("üîÑ Reseteando estado de notificaciones...");
  await Notification.updateMany({}, {
    $unset: { lastSentDate: 1 },
    sentCount: 0,
    isActive: true
  });
  console.log("‚úÖ Notificaciones reseteadas");
};

